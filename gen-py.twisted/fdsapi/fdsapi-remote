#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:twisted
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import fdsapi
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  TVersion getVersionInfo(TVersion versionInfo)'
  print '  TReturnLogonConnection logonConnection(TSTRING username, TSTRING password, TSTRING domain)'
  print '  TDWORD getPermissionForToken(TSTRING authToken)'
  print '  bool logoffConnection(TSTRING authToken)'
  print '  TDWORD ping(TDWORD input)'
  print '  TReturnVirtualChannelOpen virtualChannelOpen(TSTRING authToken, TDWORD sessionId, TSTRING virtualName, TBOOL isDynChannel, TDWORD flags)'
  print '  bool virtualChannelClose(TSTRING authToken, TDWORD sessionId, TSTRING virtualName, TDWORD instance)'
  print '  bool disconnectSession(TSTRING authToken, TDWORD sessionId, TBOOL wait)'
  print '  bool logoffSession(TSTRING authToken, TDWORD sessionId, TBOOL wait)'
  print '  TReturnEnumerateSession enumerateSessions(TSTRING authToken, TDWORD Version)'
  print '  TReturnQuerySessionInformation querySessionInformation(TSTRING authToken, TDWORD sessionId, TINT32 infoClass)'
  print '  bool startRemoteControlSession(TSTRING authToken, TDWORD sourceLogonId, TDWORD targetLogonId, TBYTE HotkeyVk, TINT16 HotkeyModifiers)'
  print '  bool stopRemoteControlSession(TSTRING authToken, TDWORD sourceLogonId, TDWORD targetLogonId)'
  print '  TDWORD sendMessage(TSTRING authToken, TDWORD sessionId, TSTRING title, TSTRING message, TDWORD style, TDWORD timeout, TBOOL wait)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = fdsapi.Client(protocol)
transport.open()

if cmd == 'getVersionInfo':
  if len(args) != 1:
    print 'getVersionInfo requires 1 args'
    sys.exit(1)
  pp.pprint(client.getVersionInfo(eval(args[0]),))

elif cmd == 'logonConnection':
  if len(args) != 3:
    print 'logonConnection requires 3 args'
    sys.exit(1)
  pp.pprint(client.logonConnection(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'getPermissionForToken':
  if len(args) != 1:
    print 'getPermissionForToken requires 1 args'
    sys.exit(1)
  pp.pprint(client.getPermissionForToken(eval(args[0]),))

elif cmd == 'logoffConnection':
  if len(args) != 1:
    print 'logoffConnection requires 1 args'
    sys.exit(1)
  pp.pprint(client.logoffConnection(eval(args[0]),))

elif cmd == 'ping':
  if len(args) != 1:
    print 'ping requires 1 args'
    sys.exit(1)
  pp.pprint(client.ping(eval(args[0]),))

elif cmd == 'virtualChannelOpen':
  if len(args) != 5:
    print 'virtualChannelOpen requires 5 args'
    sys.exit(1)
  pp.pprint(client.virtualChannelOpen(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'virtualChannelClose':
  if len(args) != 4:
    print 'virtualChannelClose requires 4 args'
    sys.exit(1)
  pp.pprint(client.virtualChannelClose(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'disconnectSession':
  if len(args) != 3:
    print 'disconnectSession requires 3 args'
    sys.exit(1)
  pp.pprint(client.disconnectSession(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'logoffSession':
  if len(args) != 3:
    print 'logoffSession requires 3 args'
    sys.exit(1)
  pp.pprint(client.logoffSession(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'enumerateSessions':
  if len(args) != 2:
    print 'enumerateSessions requires 2 args'
    sys.exit(1)
  pp.pprint(client.enumerateSessions(eval(args[0]),eval(args[1]),))

elif cmd == 'querySessionInformation':
  if len(args) != 3:
    print 'querySessionInformation requires 3 args'
    sys.exit(1)
  pp.pprint(client.querySessionInformation(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'startRemoteControlSession':
  if len(args) != 5:
    print 'startRemoteControlSession requires 5 args'
    sys.exit(1)
  pp.pprint(client.startRemoteControlSession(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'stopRemoteControlSession':
  if len(args) != 3:
    print 'stopRemoteControlSession requires 3 args'
    sys.exit(1)
  pp.pprint(client.stopRemoteControlSession(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'sendMessage':
  if len(args) != 7:
    print 'sendMessage requires 7 args'
    sys.exit(1)
  pp.pprint(client.sendMessage(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
