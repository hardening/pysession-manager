#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:twisted
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None

from zope.interface import Interface, implements
from twisted.internet import defer
from thrift.transport import TTwisted

class Iface(Interface):
  def getVersionInfo(versionInfo):
    """
    Parameters:
     - versionInfo
    """
    pass

  def logonConnection(username, password, domain):
    """
    Parameters:
     - username
     - password
     - domain
    """
    pass

  def getPermissionForToken(authToken):
    """
    Parameters:
     - authToken
    """
    pass

  def logoffConnection(authToken):
    """
    Parameters:
     - authToken
    """
    pass

  def ping(input):
    """
    Parameters:
     - input
    """
    pass

  def virtualChannelOpen(authToken, sessionId, virtualName, isDynChannel, flags):
    """
    Parameters:
     - authToken
     - sessionId
     - virtualName
     - isDynChannel
     - flags
    """
    pass

  def virtualChannelClose(authToken, sessionId, virtualName, instance):
    """
    Parameters:
     - authToken
     - sessionId
     - virtualName
     - instance
    """
    pass

  def disconnectSession(authToken, sessionId, wait):
    """
    Parameters:
     - authToken
     - sessionId
     - wait
    """
    pass

  def logoffSession(authToken, sessionId, wait):
    """
    Parameters:
     - authToken
     - sessionId
     - wait
    """
    pass

  def enumerateSessions(authToken, Version):
    """
    Parameters:
     - authToken
     - Version
    """
    pass

  def querySessionInformation(authToken, sessionId, infoClass):
    """
    Parameters:
     - authToken
     - sessionId
     - infoClass
    """
    pass

  def startRemoteControlSession(authToken, sourceLogonId, targetLogonId, HotkeyVk, HotkeyModifiers):
    """
    Parameters:
     - authToken
     - sourceLogonId
     - targetLogonId
     - HotkeyVk
     - HotkeyModifiers
    """
    pass

  def stopRemoteControlSession(authToken, sourceLogonId, targetLogonId):
    """
    Parameters:
     - authToken
     - sourceLogonId
     - targetLogonId
    """
    pass

  def sendMessage(authToken, sessionId, title, message, style, timeout, wait):
    """
    Parameters:
     - authToken
     - sessionId
     - title
     - message
     - style
     - timeout
     - wait
    """
    pass


class Client:
  implements(Iface)

  def __init__(self, transport, oprot_factory):
    self._transport = transport
    self._oprot_factory = oprot_factory
    self._seqid = 0
    self._reqs = {}

  def getVersionInfo(self, versionInfo):
    """
    Parameters:
     - versionInfo
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_getVersionInfo(versionInfo)
    return d

  def send_getVersionInfo(self, versionInfo):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('getVersionInfo', TMessageType.CALL, self._seqid)
    args = getVersionInfo_args()
    args.versionInfo = versionInfo
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_getVersionInfo(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = getVersionInfo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "getVersionInfo failed: unknown result"))

  def logonConnection(self, username, password, domain):
    """
    Parameters:
     - username
     - password
     - domain
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_logonConnection(username, password, domain)
    return d

  def send_logonConnection(self, username, password, domain):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('logonConnection', TMessageType.CALL, self._seqid)
    args = logonConnection_args()
    args.username = username
    args.password = password
    args.domain = domain
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_logonConnection(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = logonConnection_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "logonConnection failed: unknown result"))

  def getPermissionForToken(self, authToken):
    """
    Parameters:
     - authToken
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_getPermissionForToken(authToken)
    return d

  def send_getPermissionForToken(self, authToken):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('getPermissionForToken', TMessageType.CALL, self._seqid)
    args = getPermissionForToken_args()
    args.authToken = authToken
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_getPermissionForToken(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = getPermissionForToken_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "getPermissionForToken failed: unknown result"))

  def logoffConnection(self, authToken):
    """
    Parameters:
     - authToken
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_logoffConnection(authToken)
    return d

  def send_logoffConnection(self, authToken):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('logoffConnection', TMessageType.CALL, self._seqid)
    args = logoffConnection_args()
    args.authToken = authToken
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_logoffConnection(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = logoffConnection_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "logoffConnection failed: unknown result"))

  def ping(self, input):
    """
    Parameters:
     - input
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_ping(input)
    return d

  def send_ping(self, input):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('ping', TMessageType.CALL, self._seqid)
    args = ping_args()
    args.input = input
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_ping(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = ping_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "ping failed: unknown result"))

  def virtualChannelOpen(self, authToken, sessionId, virtualName, isDynChannel, flags):
    """
    Parameters:
     - authToken
     - sessionId
     - virtualName
     - isDynChannel
     - flags
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_virtualChannelOpen(authToken, sessionId, virtualName, isDynChannel, flags)
    return d

  def send_virtualChannelOpen(self, authToken, sessionId, virtualName, isDynChannel, flags):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('virtualChannelOpen', TMessageType.CALL, self._seqid)
    args = virtualChannelOpen_args()
    args.authToken = authToken
    args.sessionId = sessionId
    args.virtualName = virtualName
    args.isDynChannel = isDynChannel
    args.flags = flags
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_virtualChannelOpen(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = virtualChannelOpen_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "virtualChannelOpen failed: unknown result"))

  def virtualChannelClose(self, authToken, sessionId, virtualName, instance):
    """
    Parameters:
     - authToken
     - sessionId
     - virtualName
     - instance
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_virtualChannelClose(authToken, sessionId, virtualName, instance)
    return d

  def send_virtualChannelClose(self, authToken, sessionId, virtualName, instance):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('virtualChannelClose', TMessageType.CALL, self._seqid)
    args = virtualChannelClose_args()
    args.authToken = authToken
    args.sessionId = sessionId
    args.virtualName = virtualName
    args.instance = instance
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_virtualChannelClose(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = virtualChannelClose_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "virtualChannelClose failed: unknown result"))

  def disconnectSession(self, authToken, sessionId, wait):
    """
    Parameters:
     - authToken
     - sessionId
     - wait
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_disconnectSession(authToken, sessionId, wait)
    return d

  def send_disconnectSession(self, authToken, sessionId, wait):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('disconnectSession', TMessageType.CALL, self._seqid)
    args = disconnectSession_args()
    args.authToken = authToken
    args.sessionId = sessionId
    args.wait = wait
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_disconnectSession(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = disconnectSession_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "disconnectSession failed: unknown result"))

  def logoffSession(self, authToken, sessionId, wait):
    """
    Parameters:
     - authToken
     - sessionId
     - wait
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_logoffSession(authToken, sessionId, wait)
    return d

  def send_logoffSession(self, authToken, sessionId, wait):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('logoffSession', TMessageType.CALL, self._seqid)
    args = logoffSession_args()
    args.authToken = authToken
    args.sessionId = sessionId
    args.wait = wait
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_logoffSession(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = logoffSession_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "logoffSession failed: unknown result"))

  def enumerateSessions(self, authToken, Version):
    """
    Parameters:
     - authToken
     - Version
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_enumerateSessions(authToken, Version)
    return d

  def send_enumerateSessions(self, authToken, Version):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('enumerateSessions', TMessageType.CALL, self._seqid)
    args = enumerateSessions_args()
    args.authToken = authToken
    args.Version = Version
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_enumerateSessions(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = enumerateSessions_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "enumerateSessions failed: unknown result"))

  def querySessionInformation(self, authToken, sessionId, infoClass):
    """
    Parameters:
     - authToken
     - sessionId
     - infoClass
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_querySessionInformation(authToken, sessionId, infoClass)
    return d

  def send_querySessionInformation(self, authToken, sessionId, infoClass):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('querySessionInformation', TMessageType.CALL, self._seqid)
    args = querySessionInformation_args()
    args.authToken = authToken
    args.sessionId = sessionId
    args.infoClass = infoClass
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_querySessionInformation(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = querySessionInformation_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "querySessionInformation failed: unknown result"))

  def startRemoteControlSession(self, authToken, sourceLogonId, targetLogonId, HotkeyVk, HotkeyModifiers):
    """
    Parameters:
     - authToken
     - sourceLogonId
     - targetLogonId
     - HotkeyVk
     - HotkeyModifiers
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_startRemoteControlSession(authToken, sourceLogonId, targetLogonId, HotkeyVk, HotkeyModifiers)
    return d

  def send_startRemoteControlSession(self, authToken, sourceLogonId, targetLogonId, HotkeyVk, HotkeyModifiers):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('startRemoteControlSession', TMessageType.CALL, self._seqid)
    args = startRemoteControlSession_args()
    args.authToken = authToken
    args.sourceLogonId = sourceLogonId
    args.targetLogonId = targetLogonId
    args.HotkeyVk = HotkeyVk
    args.HotkeyModifiers = HotkeyModifiers
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_startRemoteControlSession(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = startRemoteControlSession_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "startRemoteControlSession failed: unknown result"))

  def stopRemoteControlSession(self, authToken, sourceLogonId, targetLogonId):
    """
    Parameters:
     - authToken
     - sourceLogonId
     - targetLogonId
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_stopRemoteControlSession(authToken, sourceLogonId, targetLogonId)
    return d

  def send_stopRemoteControlSession(self, authToken, sourceLogonId, targetLogonId):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('stopRemoteControlSession', TMessageType.CALL, self._seqid)
    args = stopRemoteControlSession_args()
    args.authToken = authToken
    args.sourceLogonId = sourceLogonId
    args.targetLogonId = targetLogonId
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_stopRemoteControlSession(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = stopRemoteControlSession_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "stopRemoteControlSession failed: unknown result"))

  def sendMessage(self, authToken, sessionId, title, message, style, timeout, wait):
    """
    Parameters:
     - authToken
     - sessionId
     - title
     - message
     - style
     - timeout
     - wait
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_sendMessage(authToken, sessionId, title, message, style, timeout, wait)
    return d

  def send_sendMessage(self, authToken, sessionId, title, message, style, timeout, wait):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('sendMessage', TMessageType.CALL, self._seqid)
    args = sendMessage_args()
    args.authToken = authToken
    args.sessionId = sessionId
    args.title = title
    args.message = message
    args.style = style
    args.timeout = timeout
    args.wait = wait
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_sendMessage(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = sendMessage_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "sendMessage failed: unknown result"))


class Processor(TProcessor):
  implements(Iface)

  def __init__(self, handler):
    self._handler = Iface(handler)
    self._processMap = {}
    self._processMap["getVersionInfo"] = Processor.process_getVersionInfo
    self._processMap["logonConnection"] = Processor.process_logonConnection
    self._processMap["getPermissionForToken"] = Processor.process_getPermissionForToken
    self._processMap["logoffConnection"] = Processor.process_logoffConnection
    self._processMap["ping"] = Processor.process_ping
    self._processMap["virtualChannelOpen"] = Processor.process_virtualChannelOpen
    self._processMap["virtualChannelClose"] = Processor.process_virtualChannelClose
    self._processMap["disconnectSession"] = Processor.process_disconnectSession
    self._processMap["logoffSession"] = Processor.process_logoffSession
    self._processMap["enumerateSessions"] = Processor.process_enumerateSessions
    self._processMap["querySessionInformation"] = Processor.process_querySessionInformation
    self._processMap["startRemoteControlSession"] = Processor.process_startRemoteControlSession
    self._processMap["stopRemoteControlSession"] = Processor.process_stopRemoteControlSession
    self._processMap["sendMessage"] = Processor.process_sendMessage

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return defer.succeed(None)
    else:
      return self._processMap[name](self, seqid, iprot, oprot)

  def process_getVersionInfo(self, seqid, iprot, oprot):
    args = getVersionInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getVersionInfo_result()
    d = defer.maybeDeferred(self._handler.getVersionInfo, args.versionInfo)
    d.addCallback(self.write_results_success_getVersionInfo, result, seqid, oprot)
    return d

  def write_results_success_getVersionInfo(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("getVersionInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_logonConnection(self, seqid, iprot, oprot):
    args = logonConnection_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = logonConnection_result()
    d = defer.maybeDeferred(self._handler.logonConnection, args.username, args.password, args.domain)
    d.addCallback(self.write_results_success_logonConnection, result, seqid, oprot)
    return d

  def write_results_success_logonConnection(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("logonConnection", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getPermissionForToken(self, seqid, iprot, oprot):
    args = getPermissionForToken_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getPermissionForToken_result()
    d = defer.maybeDeferred(self._handler.getPermissionForToken, args.authToken)
    d.addCallback(self.write_results_success_getPermissionForToken, result, seqid, oprot)
    return d

  def write_results_success_getPermissionForToken(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("getPermissionForToken", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_logoffConnection(self, seqid, iprot, oprot):
    args = logoffConnection_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = logoffConnection_result()
    d = defer.maybeDeferred(self._handler.logoffConnection, args.authToken)
    d.addCallback(self.write_results_success_logoffConnection, result, seqid, oprot)
    return d

  def write_results_success_logoffConnection(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("logoffConnection", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ping(self, seqid, iprot, oprot):
    args = ping_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ping_result()
    d = defer.maybeDeferred(self._handler.ping, args.input)
    d.addCallback(self.write_results_success_ping, result, seqid, oprot)
    return d

  def write_results_success_ping(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("ping", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_virtualChannelOpen(self, seqid, iprot, oprot):
    args = virtualChannelOpen_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = virtualChannelOpen_result()
    d = defer.maybeDeferred(self._handler.virtualChannelOpen, args.authToken, args.sessionId, args.virtualName, args.isDynChannel, args.flags)
    d.addCallback(self.write_results_success_virtualChannelOpen, result, seqid, oprot)
    return d

  def write_results_success_virtualChannelOpen(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("virtualChannelOpen", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_virtualChannelClose(self, seqid, iprot, oprot):
    args = virtualChannelClose_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = virtualChannelClose_result()
    d = defer.maybeDeferred(self._handler.virtualChannelClose, args.authToken, args.sessionId, args.virtualName, args.instance)
    d.addCallback(self.write_results_success_virtualChannelClose, result, seqid, oprot)
    return d

  def write_results_success_virtualChannelClose(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("virtualChannelClose", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_disconnectSession(self, seqid, iprot, oprot):
    args = disconnectSession_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = disconnectSession_result()
    d = defer.maybeDeferred(self._handler.disconnectSession, args.authToken, args.sessionId, args.wait)
    d.addCallback(self.write_results_success_disconnectSession, result, seqid, oprot)
    return d

  def write_results_success_disconnectSession(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("disconnectSession", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_logoffSession(self, seqid, iprot, oprot):
    args = logoffSession_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = logoffSession_result()
    d = defer.maybeDeferred(self._handler.logoffSession, args.authToken, args.sessionId, args.wait)
    d.addCallback(self.write_results_success_logoffSession, result, seqid, oprot)
    return d

  def write_results_success_logoffSession(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("logoffSession", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_enumerateSessions(self, seqid, iprot, oprot):
    args = enumerateSessions_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = enumerateSessions_result()
    d = defer.maybeDeferred(self._handler.enumerateSessions, args.authToken, args.Version)
    d.addCallback(self.write_results_success_enumerateSessions, result, seqid, oprot)
    return d

  def write_results_success_enumerateSessions(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("enumerateSessions", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_querySessionInformation(self, seqid, iprot, oprot):
    args = querySessionInformation_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = querySessionInformation_result()
    d = defer.maybeDeferred(self._handler.querySessionInformation, args.authToken, args.sessionId, args.infoClass)
    d.addCallback(self.write_results_success_querySessionInformation, result, seqid, oprot)
    return d

  def write_results_success_querySessionInformation(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("querySessionInformation", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_startRemoteControlSession(self, seqid, iprot, oprot):
    args = startRemoteControlSession_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = startRemoteControlSession_result()
    d = defer.maybeDeferred(self._handler.startRemoteControlSession, args.authToken, args.sourceLogonId, args.targetLogonId, args.HotkeyVk, args.HotkeyModifiers)
    d.addCallback(self.write_results_success_startRemoteControlSession, result, seqid, oprot)
    return d

  def write_results_success_startRemoteControlSession(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("startRemoteControlSession", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_stopRemoteControlSession(self, seqid, iprot, oprot):
    args = stopRemoteControlSession_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = stopRemoteControlSession_result()
    d = defer.maybeDeferred(self._handler.stopRemoteControlSession, args.authToken, args.sourceLogonId, args.targetLogonId)
    d.addCallback(self.write_results_success_stopRemoteControlSession, result, seqid, oprot)
    return d

  def write_results_success_stopRemoteControlSession(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("stopRemoteControlSession", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendMessage(self, seqid, iprot, oprot):
    args = sendMessage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendMessage_result()
    d = defer.maybeDeferred(self._handler.sendMessage, args.authToken, args.sessionId, args.title, args.message, args.style, args.timeout, args.wait)
    d.addCallback(self.write_results_success_sendMessage, result, seqid, oprot)
    return d

  def write_results_success_sendMessage(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("sendMessage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getVersionInfo_args:
  """
  Attributes:
   - versionInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'versionInfo', (TVersion, TVersion.thrift_spec), None, ), # 1
  )

  def __init__(self, versionInfo=None,):
    self.versionInfo = versionInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.versionInfo = TVersion()
          self.versionInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getVersionInfo_args')
    if self.versionInfo is not None:
      oprot.writeFieldBegin('versionInfo', TType.STRUCT, 1)
      self.versionInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getVersionInfo_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (TVersion, TVersion.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = TVersion()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getVersionInfo_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class logonConnection_args:
  """
  Attributes:
   - username
   - password
   - domain
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'username', None, None, ), # 1
    (2, TType.STRING, 'password', None, None, ), # 2
    (3, TType.STRING, 'domain', None, None, ), # 3
  )

  def __init__(self, username=None, password=None, domain=None,):
    self.username = username
    self.password = password
    self.domain = domain

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.domain = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('logonConnection_args')
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 1)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.password is not None:
      oprot.writeFieldBegin('password', TType.STRING, 2)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    if self.domain is not None:
      oprot.writeFieldBegin('domain', TType.STRING, 3)
      oprot.writeString(self.domain)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class logonConnection_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (TReturnLogonConnection, TReturnLogonConnection.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = TReturnLogonConnection()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('logonConnection_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPermissionForToken_args:
  """
  Attributes:
   - authToken
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'authToken', None, None, ), # 1
  )

  def __init__(self, authToken=None,):
    self.authToken = authToken

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.authToken = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPermissionForToken_args')
    if self.authToken is not None:
      oprot.writeFieldBegin('authToken', TType.STRING, 1)
      oprot.writeString(self.authToken)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPermissionForToken_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPermissionForToken_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class logoffConnection_args:
  """
  Attributes:
   - authToken
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'authToken', None, None, ), # 1
  )

  def __init__(self, authToken=None,):
    self.authToken = authToken

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.authToken = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('logoffConnection_args')
    if self.authToken is not None:
      oprot.writeFieldBegin('authToken', TType.STRING, 1)
      oprot.writeString(self.authToken)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class logoffConnection_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('logoffConnection_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ping_args:
  """
  Attributes:
   - input
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'input', None, None, ), # 1
  )

  def __init__(self, input=None,):
    self.input = input

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.input = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ping_args')
    if self.input is not None:
      oprot.writeFieldBegin('input', TType.I32, 1)
      oprot.writeI32(self.input)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ping_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ping_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class virtualChannelOpen_args:
  """
  Attributes:
   - authToken
   - sessionId
   - virtualName
   - isDynChannel
   - flags
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'authToken', None, None, ), # 1
    (2, TType.I32, 'sessionId', None, None, ), # 2
    (3, TType.STRING, 'virtualName', None, None, ), # 3
    (4, TType.BOOL, 'isDynChannel', None, None, ), # 4
    (5, TType.I32, 'flags', None, None, ), # 5
  )

  def __init__(self, authToken=None, sessionId=None, virtualName=None, isDynChannel=None, flags=None,):
    self.authToken = authToken
    self.sessionId = sessionId
    self.virtualName = virtualName
    self.isDynChannel = isDynChannel
    self.flags = flags

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.authToken = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sessionId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.virtualName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.isDynChannel = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.flags = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('virtualChannelOpen_args')
    if self.authToken is not None:
      oprot.writeFieldBegin('authToken', TType.STRING, 1)
      oprot.writeString(self.authToken)
      oprot.writeFieldEnd()
    if self.sessionId is not None:
      oprot.writeFieldBegin('sessionId', TType.I32, 2)
      oprot.writeI32(self.sessionId)
      oprot.writeFieldEnd()
    if self.virtualName is not None:
      oprot.writeFieldBegin('virtualName', TType.STRING, 3)
      oprot.writeString(self.virtualName)
      oprot.writeFieldEnd()
    if self.isDynChannel is not None:
      oprot.writeFieldBegin('isDynChannel', TType.BOOL, 4)
      oprot.writeBool(self.isDynChannel)
      oprot.writeFieldEnd()
    if self.flags is not None:
      oprot.writeFieldBegin('flags', TType.I32, 5)
      oprot.writeI32(self.flags)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class virtualChannelOpen_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (TReturnVirtualChannelOpen, TReturnVirtualChannelOpen.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = TReturnVirtualChannelOpen()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('virtualChannelOpen_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class virtualChannelClose_args:
  """
  Attributes:
   - authToken
   - sessionId
   - virtualName
   - instance
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'authToken', None, None, ), # 1
    (2, TType.I32, 'sessionId', None, None, ), # 2
    (3, TType.STRING, 'virtualName', None, None, ), # 3
    (4, TType.I32, 'instance', None, None, ), # 4
  )

  def __init__(self, authToken=None, sessionId=None, virtualName=None, instance=None,):
    self.authToken = authToken
    self.sessionId = sessionId
    self.virtualName = virtualName
    self.instance = instance

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.authToken = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sessionId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.virtualName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.instance = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('virtualChannelClose_args')
    if self.authToken is not None:
      oprot.writeFieldBegin('authToken', TType.STRING, 1)
      oprot.writeString(self.authToken)
      oprot.writeFieldEnd()
    if self.sessionId is not None:
      oprot.writeFieldBegin('sessionId', TType.I32, 2)
      oprot.writeI32(self.sessionId)
      oprot.writeFieldEnd()
    if self.virtualName is not None:
      oprot.writeFieldBegin('virtualName', TType.STRING, 3)
      oprot.writeString(self.virtualName)
      oprot.writeFieldEnd()
    if self.instance is not None:
      oprot.writeFieldBegin('instance', TType.I32, 4)
      oprot.writeI32(self.instance)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class virtualChannelClose_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('virtualChannelClose_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class disconnectSession_args:
  """
  Attributes:
   - authToken
   - sessionId
   - wait
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'authToken', None, None, ), # 1
    (2, TType.I32, 'sessionId', None, None, ), # 2
    (3, TType.BOOL, 'wait', None, None, ), # 3
  )

  def __init__(self, authToken=None, sessionId=None, wait=None,):
    self.authToken = authToken
    self.sessionId = sessionId
    self.wait = wait

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.authToken = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sessionId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.wait = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('disconnectSession_args')
    if self.authToken is not None:
      oprot.writeFieldBegin('authToken', TType.STRING, 1)
      oprot.writeString(self.authToken)
      oprot.writeFieldEnd()
    if self.sessionId is not None:
      oprot.writeFieldBegin('sessionId', TType.I32, 2)
      oprot.writeI32(self.sessionId)
      oprot.writeFieldEnd()
    if self.wait is not None:
      oprot.writeFieldBegin('wait', TType.BOOL, 3)
      oprot.writeBool(self.wait)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class disconnectSession_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('disconnectSession_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class logoffSession_args:
  """
  Attributes:
   - authToken
   - sessionId
   - wait
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'authToken', None, None, ), # 1
    (2, TType.I32, 'sessionId', None, None, ), # 2
    (3, TType.BOOL, 'wait', None, None, ), # 3
  )

  def __init__(self, authToken=None, sessionId=None, wait=None,):
    self.authToken = authToken
    self.sessionId = sessionId
    self.wait = wait

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.authToken = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sessionId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.wait = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('logoffSession_args')
    if self.authToken is not None:
      oprot.writeFieldBegin('authToken', TType.STRING, 1)
      oprot.writeString(self.authToken)
      oprot.writeFieldEnd()
    if self.sessionId is not None:
      oprot.writeFieldBegin('sessionId', TType.I32, 2)
      oprot.writeI32(self.sessionId)
      oprot.writeFieldEnd()
    if self.wait is not None:
      oprot.writeFieldBegin('wait', TType.BOOL, 3)
      oprot.writeBool(self.wait)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class logoffSession_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('logoffSession_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class enumerateSessions_args:
  """
  Attributes:
   - authToken
   - Version
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'authToken', None, None, ), # 1
    (2, TType.I32, 'Version', None, None, ), # 2
  )

  def __init__(self, authToken=None, Version=None,):
    self.authToken = authToken
    self.Version = Version

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.authToken = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.Version = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('enumerateSessions_args')
    if self.authToken is not None:
      oprot.writeFieldBegin('authToken', TType.STRING, 1)
      oprot.writeString(self.authToken)
      oprot.writeFieldEnd()
    if self.Version is not None:
      oprot.writeFieldBegin('Version', TType.I32, 2)
      oprot.writeI32(self.Version)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class enumerateSessions_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (TReturnEnumerateSession, TReturnEnumerateSession.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = TReturnEnumerateSession()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('enumerateSessions_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class querySessionInformation_args:
  """
  Attributes:
   - authToken
   - sessionId
   - infoClass
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'authToken', None, None, ), # 1
    (2, TType.I32, 'sessionId', None, None, ), # 2
    (3, TType.I32, 'infoClass', None, None, ), # 3
  )

  def __init__(self, authToken=None, sessionId=None, infoClass=None,):
    self.authToken = authToken
    self.sessionId = sessionId
    self.infoClass = infoClass

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.authToken = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sessionId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.infoClass = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('querySessionInformation_args')
    if self.authToken is not None:
      oprot.writeFieldBegin('authToken', TType.STRING, 1)
      oprot.writeString(self.authToken)
      oprot.writeFieldEnd()
    if self.sessionId is not None:
      oprot.writeFieldBegin('sessionId', TType.I32, 2)
      oprot.writeI32(self.sessionId)
      oprot.writeFieldEnd()
    if self.infoClass is not None:
      oprot.writeFieldBegin('infoClass', TType.I32, 3)
      oprot.writeI32(self.infoClass)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class querySessionInformation_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (TReturnQuerySessionInformation, TReturnQuerySessionInformation.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = TReturnQuerySessionInformation()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('querySessionInformation_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class startRemoteControlSession_args:
  """
  Attributes:
   - authToken
   - sourceLogonId
   - targetLogonId
   - HotkeyVk
   - HotkeyModifiers
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'authToken', None, None, ), # 1
    (2, TType.I32, 'sourceLogonId', None, None, ), # 2
    (3, TType.I32, 'targetLogonId', None, None, ), # 3
    (4, TType.BYTE, 'HotkeyVk', None, None, ), # 4
    (5, TType.I16, 'HotkeyModifiers', None, None, ), # 5
  )

  def __init__(self, authToken=None, sourceLogonId=None, targetLogonId=None, HotkeyVk=None, HotkeyModifiers=None,):
    self.authToken = authToken
    self.sourceLogonId = sourceLogonId
    self.targetLogonId = targetLogonId
    self.HotkeyVk = HotkeyVk
    self.HotkeyModifiers = HotkeyModifiers

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.authToken = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sourceLogonId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.targetLogonId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.HotkeyVk = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.HotkeyModifiers = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('startRemoteControlSession_args')
    if self.authToken is not None:
      oprot.writeFieldBegin('authToken', TType.STRING, 1)
      oprot.writeString(self.authToken)
      oprot.writeFieldEnd()
    if self.sourceLogonId is not None:
      oprot.writeFieldBegin('sourceLogonId', TType.I32, 2)
      oprot.writeI32(self.sourceLogonId)
      oprot.writeFieldEnd()
    if self.targetLogonId is not None:
      oprot.writeFieldBegin('targetLogonId', TType.I32, 3)
      oprot.writeI32(self.targetLogonId)
      oprot.writeFieldEnd()
    if self.HotkeyVk is not None:
      oprot.writeFieldBegin('HotkeyVk', TType.BYTE, 4)
      oprot.writeByte(self.HotkeyVk)
      oprot.writeFieldEnd()
    if self.HotkeyModifiers is not None:
      oprot.writeFieldBegin('HotkeyModifiers', TType.I16, 5)
      oprot.writeI16(self.HotkeyModifiers)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class startRemoteControlSession_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('startRemoteControlSession_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stopRemoteControlSession_args:
  """
  Attributes:
   - authToken
   - sourceLogonId
   - targetLogonId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'authToken', None, None, ), # 1
    (2, TType.I32, 'sourceLogonId', None, None, ), # 2
    (3, TType.I32, 'targetLogonId', None, None, ), # 3
  )

  def __init__(self, authToken=None, sourceLogonId=None, targetLogonId=None,):
    self.authToken = authToken
    self.sourceLogonId = sourceLogonId
    self.targetLogonId = targetLogonId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.authToken = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sourceLogonId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.targetLogonId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stopRemoteControlSession_args')
    if self.authToken is not None:
      oprot.writeFieldBegin('authToken', TType.STRING, 1)
      oprot.writeString(self.authToken)
      oprot.writeFieldEnd()
    if self.sourceLogonId is not None:
      oprot.writeFieldBegin('sourceLogonId', TType.I32, 2)
      oprot.writeI32(self.sourceLogonId)
      oprot.writeFieldEnd()
    if self.targetLogonId is not None:
      oprot.writeFieldBegin('targetLogonId', TType.I32, 3)
      oprot.writeI32(self.targetLogonId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stopRemoteControlSession_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stopRemoteControlSession_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendMessage_args:
  """
  Attributes:
   - authToken
   - sessionId
   - title
   - message
   - style
   - timeout
   - wait
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'authToken', None, None, ), # 1
    (2, TType.I32, 'sessionId', None, None, ), # 2
    (3, TType.STRING, 'title', None, None, ), # 3
    (4, TType.STRING, 'message', None, None, ), # 4
    (5, TType.I32, 'style', None, None, ), # 5
    (6, TType.I32, 'timeout', None, None, ), # 6
    (7, TType.BOOL, 'wait', None, None, ), # 7
  )

  def __init__(self, authToken=None, sessionId=None, title=None, message=None, style=None, timeout=None, wait=None,):
    self.authToken = authToken
    self.sessionId = sessionId
    self.title = title
    self.message = message
    self.style = style
    self.timeout = timeout
    self.wait = wait

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.authToken = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sessionId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.style = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.timeout = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.wait = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendMessage_args')
    if self.authToken is not None:
      oprot.writeFieldBegin('authToken', TType.STRING, 1)
      oprot.writeString(self.authToken)
      oprot.writeFieldEnd()
    if self.sessionId is not None:
      oprot.writeFieldBegin('sessionId', TType.I32, 2)
      oprot.writeI32(self.sessionId)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 3)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 4)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.style is not None:
      oprot.writeFieldBegin('style', TType.I32, 5)
      oprot.writeI32(self.style)
      oprot.writeFieldEnd()
    if self.timeout is not None:
      oprot.writeFieldBegin('timeout', TType.I32, 6)
      oprot.writeI32(self.timeout)
      oprot.writeFieldEnd()
    if self.wait is not None:
      oprot.writeFieldBegin('wait', TType.BOOL, 7)
      oprot.writeBool(self.wait)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendMessage_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendMessage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
